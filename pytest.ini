[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test output options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=3
    --durations=10
    --color=yes
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --junitxml=test-results.xml

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    api: marks tests that require API access
    stress: marks tests as stress tests
    backtest: marks tests as backtesting tests
    mathematical: marks tests for mathematical calculations
    constraint: marks tests for constraint validation
    edge_case: marks tests for edge cases
    performance: marks tests for performance validation

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*
    ignore::UserWarning:urllib3.*
    error::RuntimeWarning

# Minimum version
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml