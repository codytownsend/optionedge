[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "options-trading-engine"
version = "1.0.0"
description = "Advanced options trading engine with algorithmic strategy generation"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Options Trading Engine Team", email = "team@options-engine.com"},
]
keywords = [
    "options",
    "trading",
    "finance",
    "algorithmic",
    "quantitative",
    "strategy",
    "risk-management",
    "portfolio",
    "derivatives"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "requests>=2.31.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pyyaml>=6.0.0",
    "jsonschema>=4.17.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    "psutil>=5.9.0",
    "yfinance>=0.2.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "aiohttp>=3.8.0",
    "scikit-learn>=1.3.0",
    "statsmodels>=0.14.0",
    "click>=8.1.0",
    "rich>=13.4.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "SQLAlchemy>=2.0.0",
    "alembic>=1.11.0",
    "cryptography>=41.0.0",
    "slack-sdk>=3.21.0",
    "structlog>=23.1.0",
    "prometheus-client>=0.16.0",
    "ta-lib>=0.4.0",
    "QuantLib-Python>=1.31.0",
    "py-vollib>=1.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "vulture>=2.7.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "pdoc>=14.0.0"
]
ml = [
    "tensorflow>=2.13.0",
    "torch>=2.0.0",
    "xgboost>=1.7.0",
    "numba>=0.57.0"
]
backtesting = [
    "backtrader>=1.9.0",
    "zipline>=2.2.0",
    "bt>=0.2.0",
    "empyrical>=0.5.0",
    "pyfolio>=0.9.0"
]
optimization = [
    "cvxpy>=1.3.0",
    "cvxopt>=1.3.0"
]
monitoring = [
    "sentry-sdk>=1.28.0",
    "rollbar>=0.16.0",
    "great-expectations>=0.17.0",
    "pandera>=0.15.0"
]
deployment = [
    "docker>=6.1.0",
    "kubernetes>=27.2.0",
    "gunicorn>=21.0.0",
    "supervisor>=4.2.0"
]

[project.urls]
Homepage = "https://github.com/your-org/options-trading-engine"
Documentation = "https://options-trading-engine.readthedocs.io/"
Repository = "https://github.com/your-org/options-trading-engine.git"
Issues = "https://github.com/your-org/options-trading-engine/issues"

[project.scripts]
options-engine = "src.presentation.cli.main:main"
options-validate = "scripts.validate_production_readiness:main"
options-test = "scripts.run_tests:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"src.application.config" = ["*.yaml", "*.json"]
"src.presentation.templates" = ["*.html", "*.txt"]

# Black Configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts"]
known_first_party = ["src"]
known_third_party = [
    "pytest",
    "pandas",
    "numpy",
    "scipy",
    "requests",
    "yaml",
    "redis",
    "psutil",
    "yfinance",
    "sklearn",
    "statsmodels",
    "click",
    "rich",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "aiohttp",
    "structlog",
    "prometheus_client",
    "talib",
    "QuantLib",
    "py_vollib",
    "matplotlib",
    "seaborn",
    "plotly"
]
skip = ["__init__.py"]
skip_glob = ["**/migrations/*"]

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "talib.*",
    "QuantLib.*",
    "py_vollib.*",
    "backtrader.*",
    "zipline.*",
    "bt.*",
    "empyrical.*",
    "pyfolio.*",
    "cvxpy.*",
    "cvxopt.*",
    "alpha_vantage.*",
    "polygon.*",
    "quandl.*",
    "eikon.*",
    "refinitiv.*",
    "mibian.*",
    "pandas_ta.*",
    "factory_boy.*",
    "faker.*",
    "great_expectations.*",
    "pandera.*",
    "numba.*",
    "cython.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=80",
    "--durations=10",
    "--color=yes"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "stress: marks tests as stress tests",
    "backtesting: marks tests as backtesting tests",
    "requires_api: marks tests that require API access",
    "requires_db: marks tests that require database access",
    "requires_redis: marks tests that require Redis access"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning"
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
    "*/docs/*",
    "*/scripts/*",
    "*/setup.py",
    "*/conftest.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit Configuration (Security)
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", "build", "dist"]
skips = ["B101", "B601"]

# Flake8 Configuration
[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
    "F401",  # imported but unused
    "F403",  # star import used
    "F405",  # name may be undefined due to star import
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    "env",
    ".venv",
    ".env",
    "migrations",
    "node_modules",
    "*.egg-info"
]
per-file-ignores = [
    "__init__.py:F401,F403",
    "conftest.py:F401,F403"
]

# Vulture Configuration (Dead Code Detection)
[tool.vulture]
exclude = ["venv/", "env/", "build/", "dist/", "migrations/", "node_modules/"]
ignore_decorators = ["@app.route", "@click.command", "@pytest.fixture"]
ignore_names = ["_*", "test_*", "Test*", "setUp*", "tearDown*"]
min_confidence = 60
paths = ["src", "tests", "scripts"]

# Pre-commit Configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-merge-conflict"},
            {id = "check-yaml"},
            {id = "check-toml"},
            {id = "check-json"},
            {id = "check-added-large-files"},
            {id = "check-case-conflict"},
            {id = "check-executables-have-shebangs"},
            {id = "check-shebang-scripts-are-executable"},
            {id = "debug-statements"},
            {id = "detect-private-key"}
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [
            {id = "black", language_version = "python3"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort", name = "isort (python)"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.4.1",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-all"]}
        ]
    },
    {
        repo = "https://github.com/pycqa/bandit",
        rev = "1.7.5",
        hooks = [
            {id = "bandit", args = ["-c", "pyproject.toml"]}
        ]
    }
]

# Ruff Configuration (Alternative to Flake8)
[tool.ruff]
line-length = 120
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line-too-long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F401",  # imported but unused
    "F403",  # star import used
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "RUF001", # string contains ambiguous character
    "RUF002", # docstring contains ambiguous character
    "RUF003", # comment contains ambiguous character
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    "env",
    ".venv",
    ".env",
    "migrations",
    "node_modules",
    "*.egg-info"
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"test_*.py" = ["ARG", "T20", "PLR2004"]
"conftest.py" = ["F401", "F403"]
"scripts/*.py" = ["T20"]

[tool.ruff.isort]
known-first-party = ["src"]
known-third-party = [
    "pytest",
    "pandas",
    "numpy",
    "scipy",
    "requests",
    "yaml",
    "redis",
    "psutil",
    "yfinance",
    "sklearn",
    "statsmodels",
    "click",
    "rich",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "aiohttp",
    "structlog",
    "prometheus_client",
    "talib",
    "QuantLib",
    "py_vollib",
    "matplotlib",
    "seaborn",
    "plotly"
]

[tool.ruff.mccabe]
max-complexity = 10